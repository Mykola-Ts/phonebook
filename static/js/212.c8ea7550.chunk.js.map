{"version":3,"file":"static/js/212.c8ea7550.chunk.js","mappings":"kYAMaA,EAAQC,EAAAA,GAAAA,MAAH,kHAULC,EAAeD,EAAAA,GAAAA,IAAH,4NAYZE,GAAcF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,ghBAyBXI,GAAgBJ,EAAAA,EAAAA,IAAOK,EAAAA,IAAPL,CAAH,0GAObM,GAAiBN,EAAAA,EAAAA,IAAOO,EAAAA,IAAPP,CAAH,0GAOdQ,GAAoBR,EAAAA,EAAAA,IAAOS,EAAAA,IAAPT,CAAH,0GAOjBU,GAAkBV,EAAAA,EAAAA,IAAOW,EAAAA,IAAPX,CAAH,0GAOfY,EAAQZ,EAAAA,GAAAA,EAAH,+F,+EC9ELa,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,UAAC,IAAD,WACGD,IAAS,SAAC,IAAD,UAAQA,IACjBC,IAGN,C,qLCOKC,GAAcC,EAAAA,EAAAA,IAAO,CACzBC,OAAOC,EAAAA,EAAAA,MACJC,SAAS,2BACTF,MAAM,0BACNG,QACC,2CACA,0BAEJC,UAAUH,EAAAA,EAAAA,MACPC,SAAS,2BACTG,IACC,EACA,8EAEDC,IACC,GACA,+EAGAC,EAAiB,wDAEVC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KA0BMC,EAAU,WACdD,EAAa,GACd,EAED,OACE,+BACE,SAAC,KAAD,CACEE,cAAe,CAAEf,MAAO,GAAII,SAAU,IACtCY,SAhCW,SAAC,EAAD,GAAyC,IAAtChB,EAAqC,EAArCA,MAAOI,EAA8B,EAA9BA,SAAca,EAAgB,EAAhBA,UACjCC,EAAc,CAClBlB,MAAAA,EACAI,SAAAA,GAGFK,GAASU,EAAAA,EAAAA,IAAUD,IAChBE,SACAC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPC,EAAAA,GAAAA,QAAA,mBAA0BD,EAAKE,KAA/B,MAEAP,GACD,IACAQ,OAAM,SAAAC,GACO,wCAARA,GACFH,EAAAA,GAAAA,MAAYhB,GACZM,EAAaN,KAEbgB,EAAAA,GAAAA,MAAYI,EAAAA,IACZd,EAAac,EAAAA,IAEhB,GACJ,EAWKC,iBAAkB9B,EAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,WAAO,SAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACE0B,KAAK,QACLK,KAAK,QACLC,YAAY,gBACZhB,QAASA,KAEX,SAAC,KAAD,CAAgBiB,KAAM,SAExB,SAAC,KAAD,CAAcP,KAAK,QAAQQ,UAAWtC,EAAAA,SAGxC,UAAC,KAAD,WAAO,YAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACE8B,KAAK,WACLK,KAAK,WACLC,YAAY,cACZhB,QAASA,KAEX,SAAC,KAAD,CAAmBiB,KAAM,SAE3B,SAAC,KAAD,CAAcP,KAAK,WAAWQ,UAAWtC,EAAAA,QAG1CkB,IACC,SAAC,KAAD,CAAOqB,MAAO,CAAEC,aAAc,OAAQC,UAAW,UAAjD,SACGvB,KAIL,SAAC,IAAD,CAAeiB,KAAK,SAASO,UAAU,eAAvC,SAAsD,kBAO/D,E,UC1GD,EAVc,WACZ,OACE,2BACE,SAACzC,EAAA,EAAD,CAASC,MAAM,QAAf,UACE,SAACY,EAAD,OAIP,C","sources":["components/Forms/Form.styled.js","components/Section/Section.jsx","components/Forms/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { AiOutlineUser, AiOutlineMail } from 'react-icons/ai';\nimport { RiLockPasswordLine } from 'react-icons/ri';\nimport { BsTelephone } from 'react-icons/bs';\n\nexport const Label = styled.label`\n  display: block;\n\n  margin-bottom: 28px;\n\n  font-weight: 700;\n\n  cursor: pointer;\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:has(input:focus) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n\n  width: 100%;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 8px 16px 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n\n  & + svg {\n    cursor: text;\n  }\n`;\n\nexport const NameInputIcon = styled(AiOutlineUser)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailInputIcon = styled(AiOutlineMail)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const PasswordInputIcon = styled(RiLockPasswordLine)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const NumberInputIcon = styled(BsTelephone)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const Error = styled.p`\n  padding: 4px;\n\n  font-weight: 500;\n\n  color: var(--error-color);\n`;\n","import PropTypes from 'prop-types';\nimport { Title, Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { object, string } from 'yup';\nimport { toast } from 'react-hot-toast';\nimport { userLogIn } from 'redux/auth/operations';\nimport { defaultErrorText } from 'helpers/helpers';\nimport {\n  EmailInputIcon,\n  Error,\n  Label,\n  PasswordInputIcon,\n  StyledInput,\n  WrapperInput,\n} from 'components/Forms/Form.styled';\nimport { PrimaryButton } from 'components/PrimaryButton/PrimaryButton.styled';\n\nconst loginSchema = object({\n  email: string()\n    .required('This field is required!')\n    .email('Must be a valid email!')\n    .matches(\n      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      'Must be a valid email!'\n    ),\n  password: string()\n    .required('This field is required!')\n    .min(\n      7,\n      'The password is short! Please enter a password with at least 7 characters.'\n    )\n    .max(\n      18,\n      'The password is long! Please enter a password with at more 18 characters.'\n    ),\n});\nconst loginErrorText = 'An incorrect username or password has been submitted.';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [errorText, setErrorText] = useState('');\n\n  const onSubmit = ({ email, password }, { resetForm }) => {\n    const credentials = {\n      email,\n      password,\n    };\n\n    dispatch(userLogIn(credentials))\n      .unwrap()\n      .then(({ user }) => {\n        toast.success(`Welcome, ${user.name}!`);\n\n        resetForm();\n      })\n      .catch(err => {\n        if (err === 'Request failed with status code 400') {\n          toast.error(loginErrorText);\n          setErrorText(loginErrorText);\n        } else {\n          toast.error(defaultErrorText);\n          setErrorText(defaultErrorText);\n        }\n      });\n  };\n\n  const onInput = () => {\n    setErrorText('');\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={onSubmit}\n        validationSchema={loginSchema}\n      >\n        <Form>\n          <Label>\n            Email\n            <WrapperInput>\n              <StyledInput\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"user@mail.com\"\n                onInput={onInput}\n              />\n              <EmailInputIcon size={18} />\n            </WrapperInput>\n            <ErrorMessage name=\"email\" component={Error} />\n          </Label>\n\n          <Label>\n            Password\n            <WrapperInput>\n              <StyledInput\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"password123\"\n                onInput={onInput}\n              />\n              <PasswordInputIcon size={18} />\n            </WrapperInput>\n            <ErrorMessage name=\"password\" component={Error} />\n          </Label>\n\n          {errorText && (\n            <Error style={{ marginBottom: '28px', textAlign: 'center' }}>\n              {errorText}\n            </Error>\n          )}\n\n          <PrimaryButton type=\"submit\" className=\"centered-btn\">\n            Sign in\n          </PrimaryButton>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { LoginForm } from 'components/Forms/LoginForm';\nimport { Section } from 'components/Section/Section';\n\nconst Login = () => {\n  return (\n    <main>\n      <Section title=\"Login\">\n        <LoginForm />\n      </Section>\n    </main>\n  );\n};\n\nexport default Login;\n"],"names":["Label","styled","WrapperInput","StyledInput","Field","NameInputIcon","AiOutlineUser","EmailInputIcon","AiOutlineMail","PasswordInputIcon","RiLockPasswordLine","NumberInputIcon","BsTelephone","Error","Section","title","children","loginSchema","object","email","string","required","matches","password","min","max","loginErrorText","LoginForm","dispatch","useDispatch","useState","errorText","setErrorText","onInput","initialValues","onSubmit","resetForm","credentials","userLogIn","unwrap","then","user","toast","name","catch","err","defaultErrorText","validationSchema","type","placeholder","size","component","style","marginBottom","textAlign","className"],"sourceRoot":""}