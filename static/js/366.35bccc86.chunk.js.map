{"version":3,"file":"static/js/366.35bccc86.chunk.js","mappings":"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","sources":["components/Forms/Form.styled.js","components/Section/Section.jsx","hooks/useContacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/SortContacts/SortContacts.styled.js","components/SortContacts/SortContacts.jsx","components/Forms/EditContactForm.jsx","components/Contact/Contact.styled.js","components/ContactOptions/ContactOptions.styles.js","components/ContactOptions/ContactOptions.jsx","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Error/Error.styled.js","components/Error/Error.jsx","pages/Contacts.styled.js","pages/Contacts.jsx","redux/contacts/selectors.js","redux/filter/selectors.js","redux/sort/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { AiOutlineUser, AiOutlineMail } from 'react-icons/ai';\nimport { RiLockPasswordLine } from 'react-icons/ri';\nimport { BsTelephone } from 'react-icons/bs';\n\nexport const Label = styled.label`\n  display: block;\n\n  margin-bottom: 28px;\n\n  font-weight: 700;\n\n  cursor: pointer;\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:has(input:focus) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n\n  width: 100%;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 8px 16px 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n\n  & + svg {\n    cursor: text;\n  }\n`;\n\nexport const NameInputIcon = styled(AiOutlineUser)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailInputIcon = styled(AiOutlineMail)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const PasswordInputIcon = styled(RiLockPasswordLine)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const NumberInputIcon = styled(BsTelephone)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const Error = styled.p`\n  padding: 4px;\n\n  font-weight: 500;\n\n  color: var(--error-color);\n`;\n","import PropTypes from 'prop-types';\nimport { Title, Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n\n  return contacts;\n};\n\nexport const useVisibleContacts = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return visibleContacts;\n};\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const WrapperInput = styled.div`\n  position: relative;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n\n  width: 100%;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n\n  &:focus + svg {\n    fill: var(--blue-color);\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n\n  cursor: text;\n`;\n\nexport const ResetBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n\n  width: 16px;\n  height: 16px;\n  padding: 0;\n  border: none;\n\n  color: currentColor;\n  background-color: transparent;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus) {\n    color: var(--blue-color);\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { filterContacts } from 'redux/filter/slice';\nimport {\n  FilterInput,\n  SearchIcon,\n  WrapperInput,\n  ResetBtn,\n} from './Filter.styled';\nimport { Label } from 'components/Forms/Form.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  useEffect(() => {\n    dispatch(filterContacts(''));\n  }, [dispatch]);\n\n  const onChange = evt => {\n    const value = evt.currentTarget.value.trim();\n\n    dispatch(filterContacts(value));\n  };\n\n  const onReset = evt => {\n    const label = evt.currentTarget.closest('label');\n    label.control.value = '';\n\n    dispatch(filterContacts(''));\n  };\n\n  return (\n    <>\n      <Label>\n        Find contact by name or number\n        <WrapperInput>\n          <FilterInput\n            type=\"text\"\n            value={filter}\n            placeholder=\"Name or number\"\n            onChange={onChange}\n          />\n          <SearchIcon />\n\n          {filter && (\n            <ResetBtn type=\"button\" aria-label=\"Reset filter\" onClick={onReset}>\n              <AiOutlineClose />\n            </ResetBtn>\n          )}\n        </WrapperInput>\n      </Label>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  gap: 24px;\n\n  margin-bottom: 28px;\n\n  & > div {\n    width: calc((100% - 24px) / 2);\n    height: 36px;\n  }\n\n  @media screen and (min-width: 768px) {\n    & > div {\n      width: auto;\n      min-width: 160px;\n    }\n  }\n`;\n","import Select from 'react-select';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sortContacts } from 'redux/sort/slice';\nimport { selectSortValue } from 'redux/sort/selectors';\nimport { selectStyles } from 'helpers/helpers';\nimport { Wrapper } from './SortContacts.styled';\n\nconst sortByOptions = [\n  { value: 'id', label: 'Sort by date' },\n  { value: 'name', label: 'Sort by name' },\n  { value: 'number', label: 'Sort by number' },\n];\nconst sortOrderOptions = [\n  { value: 'asc', label: 'Ascending' },\n  { value: 'desc', label: 'Descending' },\n];\n\nexport const SortContacts = () => {\n  const dispatch = useDispatch();\n  const sortValue = useSelector(selectSortValue) || {};\n  const [sortBy, setSortBy] = useState(\n    sortByOptions.find(({ value }) => value === sortValue.sortByValue) ||\n      sortByOptions[0]\n  );\n  const [sortOrder, setSortOrder] = useState(\n    sortOrderOptions.find(({ value }) => value === sortValue.sortOrderValue) ||\n      sortOrderOptions[0]\n  );\n\n  const onChangeSortedBy = option => {\n    dispatch(\n      sortContacts({\n        sortByValue: option.value,\n        sortOrderValue: sortOrder.value,\n      })\n    );\n\n    setSortBy(option);\n  };\n\n  const onChangeSortOrder = option => {\n    dispatch(\n      sortContacts({\n        sortByValue: sortBy.value,\n        sortOrderValue: option.value,\n      })\n    );\n\n    setSortOrder(option);\n  };\n\n  return (\n    <Wrapper>\n      <Select\n        options={sortByOptions}\n        defaultValue={sortBy}\n        styles={selectStyles}\n        aria-label=\"Sort contacts by value\"\n        onChange={onChangeSortedBy}\n      />\n\n      <Select\n        options={sortOrderOptions}\n        defaultValue={sortOrder}\n        styles={selectStyles}\n        aria-label=\"Sort contacts by order\"\n        onChange={onChangeSortOrder}\n      />\n    </Wrapper>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { toast } from 'react-hot-toast';\nimport { BiSave } from 'react-icons/bi';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useContacts } from 'hooks/useContacts';\nimport {\n  contactSchema,\n  defaultErrorText,\n  isIncludesContact,\n} from 'helpers/helpers';\nimport { editContact } from 'redux/contacts/operations';\nimport {\n  Error,\n  Label,\n  NameInputIcon,\n  NumberInputIcon,\n  StyledInput,\n  WrapperInput,\n} from './Form.styled';\nimport { PrimaryButton } from 'components/PrimaryButton/PrimaryButton.styled';\nimport { ButtonsWrap } from 'components/ModalWindows/ModalWindow.styled';\n\nexport const EditContactForm = ({ contact, closeModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n  const { id, name, number } = contact;\n\n  const onSubmit = values => {\n    const allContactsExceptEdited = contacts.filter(\n      contact => contact.name !== name && contact.number !== number\n    );\n\n    if (\n      isIncludesContact(allContactsExceptEdited, values.name, values.number)\n    ) {\n      return;\n    }\n\n    dispatch(\n      editContact({\n        id,\n        editedContact: values,\n      })\n    )\n      .unwrap()\n      .then(resp => {\n        toast.remove();\n        toast.success(`Contact ${name} successfully changed.`);\n      })\n      .catch(error => {\n        toast.remove();\n        toast.error(defaultErrorText);\n      });\n\n    closeModal();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name, number }}\n      onSubmit={onSubmit}\n      validationSchema={contactSchema}\n    >\n      <Form>\n        <Label>\n          Name\n          <WrapperInput>\n            <StyledInput\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"First name Last name\"\n            />\n            <NameInputIcon size={18} />\n          </WrapperInput>\n          <ErrorMessage name=\"name\" component={Error} />\n        </Label>\n\n        <Label>\n          Number\n          <WrapperInput>\n            <StyledInput type=\"tel\" name=\"number\" placeholder=\"000-00-00\" />\n            <NumberInputIcon />\n          </WrapperInput>\n          <ErrorMessage name=\"number\" component={Error} />\n        </Label>\n\n        <ButtonsWrap>\n          <PrimaryButton\n            type=\"button\"\n            className=\"cancel-primary-btn\"\n            onClick={() => closeModal()}\n          >\n            <AiOutlineClose size={20} />\n            Cancel changes\n          </PrimaryButton>\n          <PrimaryButton type=\"submit\">\n            <BiSave size={20} />\n            Save changes\n          </PrimaryButton>\n        </ButtonsWrap>\n      </Form>\n    </Formik>\n  );\n};\n\nEditContactForm.propTypes = {\n  contact: PropTypes.object.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 8px;\n\n  margin-right: auto;\n  overflow: hidden;\n\n  @media screen and (max-width: 767px) {\n    justify-content: center;\n\n    width: 100%;\n\n    text-align: center;\n  }\n`;\n\nexport const AvatarWrapp = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n\n  width: 60px;\n  height: 60px;\n  border: 1px solid var(--gray-color);\n  border-radius: 50%;\n\n  box-shadow: var(--box-shadow);\n`;\n\nexport const AvatarAlt = styled.span`\n  font-size: 20px;\n  line-height: 1.4;\n  letter-spacing: 0.2px;\n`;\n\nexport const ContactName = styled.p`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\n\nexport const ContactNumber = styled.a`\n  font-weight: 400;\n  text-decoration: none;\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const ContactWrapp = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-shrink: 0;\n\n  @media screen and (max-width: 767px) {\n    gap: 12px;\n  }\n\n  @media screen and (max-width: 380px) {\n    flex-direction: column;\n  }\n`;\n\nexport const PhoneLink = styled.a`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 36px;\n  height: 36px;\n  border: 1px solid var(--success-color);\n  border-radius: 50%;\n  padding: 8px;\n\n  color: var(--success-color);\n  background-color: transparent;\n\n  transition: color var(--transition-duration) var(--transition-timing-function),\n    background-color var(--transition-duration)\n      var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    color: var(--white-color);\n    background-color: var(--success-color);\n  }\n`;\n\nexport const BtnsWrapp = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: row;\n    gap: 12px;\n  }\n\n  @media screen and (max-width: 380px) {\n    flex-direction: column;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const ContactOptionsWrap = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n`;\n\nexport const ContactOptionsBtn = styled.button`\n  transform: scaleY(1);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: start;\n\n  width: 20px;\n  height: 26px;\n  border: none;\n  padding: 0;\n\n  color: currentColor;\n  background-color: transparent;\n\n  transition: transform var(--transition-duration)\n      var(--transition-timing-function),\n    color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    transform: scaleY(1.1);\n\n    color: var(--blue-color);\n  }\n`;\n\nexport const ContactOptionsMenu = styled.ul`\n  position: absolute;\n  top: 0;\n  right: 20px;\n  z-index: 10;\n\n  display: flex;\n  flex-direction: column;\n\n  min-width: 120px;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 4px 0;\n\n  background-color: var(--white-color);\n`;\n\nexport const ContactOptionsMenuItem = styled.li`\n  width: 100%;\n`;\n\nexport const ContactOptionsMenuBtn = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  width: 100%;\n  border: 1px solid var(--gray-color);\n  border-radius: 4px;\n  padding: 4px 8px;\n\n  color: currentColor;\n  background-color: #ffffffb3;\n\n  transition: color var(--transition-duration) var(--transition-timing-function),\n    background-color var(--transition-duration)\n      var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    color: var(--blue-color);\n    background-color: var(--white-color);\n  }\n\n  &.calling-btn:is(:hover, :focus, :active) {\n    color: var(--success-color);\n  }\n\n  &.delete-btn:is(:hover, :focus, :active) {\n    color: var(--red-color);\n  }\n`;\n\nexport const ContactOptionsMenuLink = styled.a`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  width: 100%;\n  border: 1px solid var(--gray-color);\n  border-radius: 4px;\n  padding: 4px 8px;\n\n  color: currentColor;\n  background-color: #ffffffb3;\n\n  transition: color var(--transition-duration) var(--transition-timing-function),\n    background-color var(--transition-duration)\n      var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    color: var(--blue-color);\n    background-color: var(--white-color);\n  }\n\n  &.calling-btn:is(:hover, :focus, :active) {\n    color: var(--success-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useRef, useState } from 'react';\nimport { SlOptionsVertical } from 'react-icons/sl';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport { MdOutlineEdit } from 'react-icons/md';\nimport { GoTrash } from 'react-icons/go';\nimport { useClickOutside } from 'hooks/useClickOutside';\nimport {\n  ContactOptionsBtn,\n  ContactOptionsMenu,\n  ContactOptionsMenuBtn,\n  ContactOptionsMenuItem,\n  ContactOptionsMenuLink,\n  ContactOptionsWrap,\n} from './ContactOptions.styles';\n\nexport const ContactOptions = ({ numberHref, onClickEdit, onClickDelete }) => {\n  const [isOptionsMenuOpen, setIsOptionsMenuOpen] = useState(false);\n  const optionsMenuRef = useRef(null);\n\n  useClickOutside(isOptionsMenuOpen, optionsMenuRef, () =>\n    setIsOptionsMenuOpen(false)\n  );\n\n  return (\n    <ContactOptionsWrap>\n      <ContactOptionsBtn\n        type=\"button\"\n        onClick={() => setIsOptionsMenuOpen(prev => !prev)}\n      >\n        <SlOptionsVertical size={20} />\n      </ContactOptionsBtn>\n\n      {isOptionsMenuOpen && (\n        <ContactOptionsMenu ref={optionsMenuRef}>\n          <ContactOptionsMenuItem key=\"Call\">\n            <ContactOptionsMenuLink\n              href={`tel:${numberHref}`}\n              className=\"calling-btn\"\n              onClick={() => {\n                setIsOptionsMenuOpen(false);\n              }}\n            >\n              <BsFillTelephoneFill size={16} /> Call\n            </ContactOptionsMenuLink>\n          </ContactOptionsMenuItem>\n\n          <ContactOptionsMenuItem key=\"Edit\">\n            <ContactOptionsMenuBtn\n              type=\"button\"\n              onClick={() => {\n                setIsOptionsMenuOpen(false);\n                onClickEdit();\n              }}\n            >\n              <MdOutlineEdit size={20} /> Edit\n            </ContactOptionsMenuBtn>\n          </ContactOptionsMenuItem>\n\n          <ContactOptionsMenuItem key=\"Delete\">\n            <ContactOptionsMenuBtn\n              type=\"button\"\n              className=\"delete-btn\"\n              onClick={() => {\n                setIsOptionsMenuOpen(false);\n                onClickDelete();\n              }}\n            >\n              <GoTrash size={20} /> Delete\n            </ContactOptionsMenuBtn>\n          </ContactOptionsMenuItem>\n        </ContactOptionsMenu>\n      )}\n    </ContactOptionsWrap>\n  );\n};\n\nContactOptions.propTypes = {\n  numberHref: PropTypes.string.isRequired,\n  onClickEdit: PropTypes.func.isRequired,\n  onClickDelete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { lazy, Suspense, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { defaultErrorText, linearGradients } from 'helpers/helpers';\nimport { EditContactForm } from 'components/Forms/EditContactForm';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  ContactInfo,\n  ContactNumber,\n  ContactName,\n  AvatarWrapp,\n  PhoneLink,\n  AvatarAlt,\n} from './Contact.styled';\nimport { Title } from 'components/Section/Section.styled';\nimport { ContactOptions } from 'components/ContactOptions/ContactOptions';\n\nconst ModalWindow = lazy(() => import('../ModalWindows/ModalWindow'));\nconst DeleteModalWindow = lazy(() =>\n  import('../ModalWindows/DeleteModalWindow')\n);\n\nconst body = document.body;\nconst modalVariants = {\n  editContact: 'edit',\n  deleteContact: 'delete',\n};\n\nexport const Contact = ({ contact = {}, ordinalNumber = 0 }) => {\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n  const [deleteModalIsOpen, setDeleteModalIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggleModal = (shouldOpen, variant) => {\n    shouldOpen ? (body.style.overflow = 'hidden') : (body.style.overflow = '');\n\n    if (variant === modalVariants.editContact) {\n      setEditModalIsOpen(shouldOpen);\n    } else if (variant === modalVariants.deleteContact) {\n      setDeleteModalIsOpen(shouldOpen);\n    }\n  };\n\n  const onDelete = (id, name) => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(resp => {\n        toast.remove();\n        toast.success(`${name} deleted from contacts`);\n\n        toggleModal(false, modalVariants.deleteContact);\n      })\n      .catch(error => {\n        toast.remove();\n        toast.error(defaultErrorText);\n      });\n  };\n\n  const { id, name, number } = contact;\n  const numberHref = number.split('-').join('').split(' ').join('');\n  const firstName = name.split(' ')[0];\n  const lastName = name.split(' ')[1] || '';\n  const backgroundGradient =\n    linearGradients[ordinalNumber % linearGradients.length];\n\n  return (\n    <>\n      <AvatarWrapp style={true ? { background: backgroundGradient } : {}}>\n        <AvatarAlt>\n          {firstName.split('')[0].toUpperCase()}\n          {lastName && lastName.split('')[0].toUpperCase()}\n        </AvatarAlt>\n      </AvatarWrapp>\n\n      <ContactInfo>\n        <ContactName>{`${name} `}</ContactName>\n        <ContactNumber href={`tel:${numberHref}`}>{number}</ContactNumber>\n      </ContactInfo>\n\n      {/* <ContactWrapp> */}\n      <PhoneLink\n        href={`tel:${numberHref}`}\n        aria-label={`Call the number ${numberHref}`}\n      >\n        <BsFillTelephoneFill />\n      </PhoneLink>\n\n      {/* <BtnsWrapp>\n          <PrimaryButton\n            type=\"button\"\n            className=\"contact-btn\"\n            onClick={() => toggleModal(true, modalVariants.editContact)}\n          >\n            <MdOutlineEdit size={20} />\n            Edit\n          </PrimaryButton>\n\n          <PrimaryButton\n            type=\"button\"\n            className=\"contact-btn delete-primary-btn\"\n            onClick={() => toggleModal(true, modalVariants.deleteContact)}\n          >\n            <GoTrash size={20} />\n            Delete\n          </PrimaryButton>\n        </BtnsWrapp> */}\n      {/* </ContactWrapp> */}\n\n      <ContactOptions\n        numberHref={numberHref}\n        onClickEdit={() => toggleModal(true, modalVariants.editContact)}\n        onClickDelete={() => toggleModal(true, modalVariants.deleteContact)}\n      />\n\n      <Suspense fallback={<Loader />}>\n        <ModalWindow\n          closeModal={() => toggleModal(false, modalVariants.editContact)}\n          modalIsOpen={editModalIsOpen}\n        >\n          <Title>Edit contact</Title>\n          <EditContactForm\n            contact={contact}\n            closeModal={() => toggleModal(false, modalVariants.editContact)}\n          />\n        </ModalWindow>\n      </Suspense>\n\n      <Suspense fallback={<Loader />}>\n        <DeleteModalWindow\n          title=\"Delete contact\"\n          modalText={\n            <>\n              Are you sure you want to delete the contact{' '}\n              <strong>{name}</strong>?\n            </>\n          }\n          isOpen={deleteModalIsOpen}\n          closeModal={() => toggleModal(false, modalVariants.deleteContact)}\n          onDelete={() => onDelete(id, name)}\n        />\n      </Suspense>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n  ordinalNumber: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  position: relative;\n  transform: scale(1, 1);\n\n  display: flex;\n  align-items: center;\n  gap: 16px;\n\n  border: 2px solid var(--gray-color);\n  border-radius: 8px;\n  padding: 16px 44px 16px 20px;\n\n  box-shadow: 0px 1px 6px rgba(46, 47, 66, 0.08),\n    0px 1px 1px rgba(46, 47, 66, 0.16), 0px 2px 1px rgba(46, 47, 66, 0.08);\n\n  transition: transform var(--transition-duration)\n    var(--transition-timing-function);\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n\n  &:is(:hover, :focus) {\n    transform: scale(1.01, 1.05);\n  }\n\n  @media screen and (max-width: 767px) {\n    flex-wrap: wrap;\n    justify-content: center;\n    gap: 12px;\n  }\n`;\n\nexport const NoContactsText = styled.p`\n  text-align: center;\n`;\n","import { useVisibleContacts } from 'hooks/useContacts';\nimport { Contact } from 'components/Contact/Contact';\nimport { ListItem, NoContactsText } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const contacts = useVisibleContacts();\n\n  return contacts.length ? (\n    <ul>\n      {contacts.map((contact, idx) => (\n        <ListItem key={contact.id}>\n          <Contact contact={contact} ordinalNumber={idx} />\n        </ListItem>\n      ))}\n    </ul>\n  ) : (\n    <NoContactsText>\n      No contacts found for the entered name or number\n    </NoContactsText>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n\n  width: 100%;\n  height: calc(100vh - 134px);\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 18px;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n`;\n","import { BsEmojiFrown } from 'react-icons/bs';\nimport { Text, Wrapper } from './Error.styled';\n\nexport const Error = () => {\n  return (\n    <Wrapper>\n      <BsEmojiFrown size={64} />\n      <Text>Oops, something went wrong. Try reloading the page.</Text>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const NoContactsText = styled.p`\n  text-align: center;\n`;\n\nexport const TotalContacts = styled.p`\n  margin-bottom: 12px;\n\n  font-weight: 700;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { useContacts, useVisibleContacts } from 'hooks/useContacts';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { SortContacts } from 'components/SortContacts/SortContacts';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport { NoContactsText, TotalContacts } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n  const visibleContacts = useVisibleContacts();\n  const filter = useSelector(selectFilterValue);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n      .unwrap()\n      .catch(error => {\n        toast.remove();\n        toast.error('Oops, something went wrong. Try reloading the page.');\n      });\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Section title=\"Contacts\">\n        <Filter />\n\n        {!error ? (\n          contacts.length > 0 ? (\n            <>\n              {!filter && (\n                <TotalContacts>Total contacts: {contacts.length}</TotalContacts>\n              )}\n\n              {filter && visibleContacts.length > 0 && (\n                <TotalContacts>\n                  {`Total of contacts found for the query: ${visibleContacts.length}`}\n                </TotalContacts>\n              )}\n\n              {visibleContacts.length > 0 && <SortContacts />}\n\n              <ContactsList />\n            </>\n          ) : (\n            !isLoading && <NoContactsText>No contacts</NoContactsText>\n          )\n        ) : (\n          <Error />\n        )}\n\n        {isLoading && <Loader text=\"Loading data, please wait...\" />}\n      </Section>\n    </main>\n  );\n};\n\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { selectSortValue } from 'redux/sort/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue, selectSortValue],\n  (contacts, filter, sort) => {\n    return contacts\n      .filter(\n        contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n          contact.number.includes(filter)\n      )\n      .sort((a, b) =>\n        sort.sortOrderValue === 'asc'\n          ? a[sort.sortByValue].localeCompare(b[sort.sortByValue])\n          : b[sort.sortByValue].localeCompare(a[sort.sortByValue])\n      );\n  }\n);\n","export const selectFilterValue = state => state.filter.value;\n","export const selectSortValue = state => state.sort.value;\n"],"names":["Label","styled","WrapperInput","StyledInput","Field","NameInputIcon","AiOutlineUser","EmailInputIcon","AiOutlineMail","PasswordInputIcon","RiLockPasswordLine","NumberInputIcon","BsTelephone","Error","Section","title","children","useContacts","useSelector","selectContacts","useVisibleContacts","selectVisibleContacts","FilterInput","SearchIcon","BsSearch","ResetBtn","Filter","dispatch","useDispatch","filter","selectFilterValue","useEffect","filterContacts","type","value","placeholder","onChange","evt","currentTarget","trim","onClick","closest","control","Wrapper","sortByOptions","label","sortOrderOptions","SortContacts","sortValue","selectSortValue","useState","find","sortByValue","sortBy","setSortBy","sortOrderValue","sortOrder","setSortOrder","options","defaultValue","styles","selectStyles","option","sortContacts","EditContactForm","contact","closeModal","contacts","id","name","number","initialValues","onSubmit","values","allContactsExceptEdited","isIncludesContact","editContact","editedContact","unwrap","then","resp","toast","catch","error","defaultErrorText","validationSchema","contactSchema","size","component","className","ContactInfo","AvatarWrapp","AvatarAlt","ContactName","ContactNumber","PhoneLink","ContactOptionsWrap","ContactOptionsBtn","ContactOptionsMenu","ContactOptionsMenuItem","ContactOptionsMenuBtn","ContactOptionsMenuLink","ContactOptions","numberHref","onClickEdit","onClickDelete","isOptionsMenuOpen","setIsOptionsMenuOpen","optionsMenuRef","useRef","useClickOutside","prev","ref","href","ModalWindow","lazy","DeleteModalWindow","body","document","modalVariants","Contact","ordinalNumber","editModalIsOpen","setEditModalIsOpen","deleteModalIsOpen","setDeleteModalIsOpen","toggleModal","shouldOpen","variant","style","overflow","split","join","firstName","lastName","backgroundGradient","linearGradients","background","toUpperCase","Suspense","fallback","Loader","modalIsOpen","modalText","isOpen","onDelete","deleteContact","ListItem","NoContactsText","ContactsList","length","map","idx","Text","TotalContacts","visibleContacts","isLoading","selectIsLoading","selectError","fetchContacts","text","state","items","createSelector","sort","toLowerCase","includes","a","b","localeCompare"],"sourceRoot":""}