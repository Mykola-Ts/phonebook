{"version":3,"file":"static/js/81.db679a6c.chunk.js","mappings":"2ZAMaA,EAAQC,EAAAA,GAAAA,MAAH,kHAULC,EAAeD,EAAAA,GAAAA,IAAH,4NAYZE,GAAcF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,ghBAyBXI,GAAgBJ,EAAAA,EAAAA,IAAOK,EAAAA,IAAPL,CAAH,0GAObM,GAAiBN,EAAAA,EAAAA,IAAOO,EAAAA,IAAPP,CAAH,0GAOdQ,GAAoBR,EAAAA,EAAAA,IAAOS,EAAAA,IAAPT,CAAH,0GAOjBU,GAAkBV,EAAAA,EAAAA,IAAOW,EAAAA,IAAPX,CAAH,0GAOfY,EAAcZ,EAAAA,GAAAA,IAAH,gIAQXa,EAAQb,EAAAA,GAAAA,EAAH,+F,mGCvFLc,E,QAAWd,GAAAA,OAAH,6iB,UCGrBe,IAAAA,cAAoB,SAEpB,IAAMC,EAAoB,CACxBC,QAAS,CACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,UAAW,wBACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,MAAO,oBACPC,SAAU,QACVC,UAAW,QACXC,QAAS,YACTC,YAAa,SAIJC,EAAc,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAClD,OACE,UAAC,IAAD,CACEC,OAAQD,EACRE,eAAgBH,EAChBI,MAAOrB,EACPsB,aAAa,gBAJf,UAMGN,GAED,SAAClB,EAAD,CAAUyB,QAASN,EAAnB,UACE,SAAC,MAAD,QAIP,C,+ECrCYO,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOT,EAAe,EAAfA,SAC/B,OACE,UAAC,IAAD,WACGS,IAAS,SAAC,IAAD,UAAQA,IACjBT,IAGN,C,yGCRYU,EAAU1C,EAAAA,GAAAA,IAAH,mKASP2C,EAAQ3C,EAAAA,GAAAA,GAAH,4K,sGCLL4C,EAAc,WAGzB,OAFiBC,EAAAA,EAAAA,IAAYC,EAAAA,GAG9B,EAEYC,EAAqB,WAGhC,OAFwBF,EAAAA,EAAAA,IAAYG,EAAAA,GAGrC,C,6OCbYC,GAAcjD,EAAAA,EAAAA,IAAOkD,EAAAA,IAAPlD,CAAH,oGAOXmD,EAAYnD,EAAAA,GAAAA,EAAH,6FAOTY,EAAcZ,EAAAA,GAAAA,IAAH,0M,oBCPXoD,EAAyB,SAAC,GAAiC,IAA/BlB,EAA8B,EAA9BA,YAAaD,EAAiB,EAAjBA,WAC9CoB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACvB,EAAA,EAAD,CAAaE,WAAYA,EAAYC,YAAaA,EAAlD,WACE,SAACe,EAAD,CAAaM,KAAM,GAAI7B,MAAO,MAE9B,SAACyB,EAAD,UAAW,yCAEX,UAACvC,EAAD,YACE,SAAC,IAAD,CAAe4C,KAAK,SAASjB,QAAS,kBAAMN,GAAN,EAAtC,SAA0D,uBAG1D,SAAC,IAAD,CACEuB,KAAK,SACLjB,QAAS,WACPc,EAAS,YACV,EAJH,SAKC,wBAMR,E,SCXYI,EAAiB,WAC5B,IAAMC,GAAWd,EAAAA,EAAAA,KACXe,GAAWC,EAAAA,EAAAA,MACjB,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAO3B,EAAP,KAAoB4B,EAApB,KACA,GAAkCD,EAAAA,EAAAA,UAAS,IAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KA2BMC,EAAU,WACdD,EAAa,GACd,EAMD,OACE,iCACE,SAAC,KAAD,CACEE,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IACnCC,SArCW,SAAC,EAAD,GAAsC,IAAnCF,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,OAAYE,EAAgB,EAAhBA,UAC9BC,GAAiBC,EAAAA,EAAAA,IAAkBd,EAAUS,EAAMC,GAErDG,EACFP,EAAaO,IAKfZ,GAASc,EAAAA,EAAAA,IAAW,CAAEN,KAAAA,EAAMC,OAAAA,KACzBM,SACAC,MAAK,SAAAC,GACJC,EAAAA,GAAAA,SACAA,EAAAA,GAAAA,QAAA,UAAiBV,EAAjB,uBAEAL,GAAe,EAChB,IACAgB,OAAM,SAAAC,GACLF,EAAAA,GAAAA,SACAA,EAAAA,GAAAA,MAAYG,EAAAA,GACb,IAEHV,IACD,EAeKW,iBAAkBC,EAAAA,GAHpB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,WAAO,QAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACE1B,KAAK,OACLW,KAAK,OACLgB,YAAY,uBACZlB,QAASA,KAEX,SAAC,KAAD,CAAeV,KAAM,SAEvB,SAAC,KAAD,CAAcY,KAAK,OAAOiB,UAAWvE,EAAAA,SAGvC,UAAC,KAAD,WAAO,UAEL,UAAC,KAAD,YACE,SAAC,KAAD,CACE2C,KAAK,MACLW,KAAK,SACLgB,YAAY,YACZlB,QAASA,KAEX,SAAC,KAAD,QAEF,SAAC,KAAD,CAAcE,KAAK,SAASiB,UAAWvE,EAAAA,QAGxCkD,IACC,SAAC,KAAD,CAAO1B,MAAO,CAAEgD,aAAc,OAAQC,UAAW,UAAjD,SACGvB,KAIL,UAAC,IAAD,CAAeP,KAAK,SAAS+B,UAAU,eAAvC,WACE,SAAC,MAAD,CAAehC,KAAM,KAAM,uBAMjC,SAACH,EAAD,CACElB,YAAaA,EACbD,WAvDa,WACjB6B,GAAe,EAChB,MAyDF,E,UCjGD,EAda,WACX,IAAM0B,GAAY3C,EAAAA,EAAAA,IAAY4C,EAAAA,IAE9B,OACE,6BACE,SAACjD,EAAA,EAAD,CAASC,MAAM,cAAf,UACE,SAACgB,EAAD,MAGD+B,IAAa,SAACE,EAAA,EAAD,MAGnB,C,wJCfY5C,EAAiB,SAAA6C,GAAK,OAAIA,EAAMjC,SAASkC,KAAnB,EAEtBH,EAAkB,SAAAE,GAAK,OAAIA,EAAMjC,SAAS8B,SAAnB,EAEvBK,EAAc,SAAAF,GAAK,OAAIA,EAAMjC,SAASqB,KAAnB,EAEnB/B,GAAwB8C,EAAAA,EAAAA,IACnC,CAAChD,EAAgBiD,EAAAA,IACjB,SAACrC,EAAUsC,GACT,OAAOtC,EAASsC,QACd,SAAAC,GAAO,OACLA,EAAQ9B,KAAK+B,cAAcC,SAASH,EAAOE,gBAC3CD,EAAQ7B,OAAO+B,SAASH,EAFnB,GAIV,G,uDCjBI,IAAMD,EAAoB,SAAAJ,GAAK,OAAIA,EAAMK,OAAOI,KAAjB,C","sources":["components/Forms/Form.styled.js","components/ModalWindow/ModalWindow.styled.js","components/ModalWindow/ModalWindow.jsx","components/Section/Section.jsx","components/Section/Section.styled.js","hooks/useContacts.js","components/AddContactSuccessModal/AddContactSuccessModal.styled.js","components/AddContactSuccessModal/AddContactSuccessModal.jsx","components/Forms/AddContactForm.jsx","pages/Home.jsx","redux/contacts/selectors.js","redux/filter/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { AiOutlineUser, AiOutlineMail } from 'react-icons/ai';\nimport { RiLockPasswordLine } from 'react-icons/ri';\nimport { BsTelephone } from 'react-icons/bs';\n\nexport const Label = styled.label`\n  display: block;\n\n  margin-bottom: 28px;\n\n  font-weight: 700;\n\n  cursor: pointer;\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:has(input:focus) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n\n  width: 100%;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 8px 16px 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n\n  & + svg {\n    cursor: text;\n  }\n`;\n\nexport const NameInputIcon = styled(AiOutlineUser)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailInputIcon = styled(AiOutlineMail)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const PasswordInputIcon = styled(RiLockPasswordLine)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const NumberInputIcon = styled(BsTelephone)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const ButtonsWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 28px;\n`;\n\nexport const Error = styled.p`\n  padding: 4px;\n\n  font-weight: 500;\n\n  color: var(--error-color);\n`;\n","import styled from 'styled-components';\n\nexport const CloseBtn = styled.button`\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  transform: scale(1);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: 1px solid transparent;\n  border-radius: 50px;\n  padding: 0;\n\n  background-color: transparent;\n\n  transition: transform var(--transition-duration)\n      var(--transition-timing-function),\n    color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    transform: scale(1.15);\n\n    color: var(--blue-color);\n  }\n`;\n","import Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { CloseBtn } from './ModalWindow.styled';\n\nModal.setAppElement('#root');\n\nconst customModalStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: 'calc(100% - 30px)',\n    maxWidth: '600px',\n    minHeight: '160px',\n    padding: '32px 20px',\n    marginRight: '-50%',\n  },\n};\n\nexport const ModalWindow = ({ children, closeModal, modalIsOpen }) => {\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      style={customModalStyles}\n      contentLabel=\"Contact Modal\"\n    >\n      {children}\n\n      <CloseBtn onClick={closeModal}>\n        <AiOutlineClose />\n      </CloseBtn>\n    </Modal>\n  );\n};\n\nModalWindow.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  closeModal: PropTypes.func.isRequired,\n  modalIsOpen: PropTypes.bool.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Title, Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  padding: 40px 20px;\n\n  background-color: var(--white-color);\n  box-shadow: var(--box-shadow);\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 28px;\n\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n  text-transform: uppercase;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n\n  return contacts;\n};\n\nexport const useVisibleContacts = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return visibleContacts;\n};\n","import styled from 'styled-components';\nimport { MdOutlineDoneOutline } from 'react-icons/md';\n\nexport const SuccessIcon = styled(MdOutlineDoneOutline)`\n  margin: 0 auto;\n  margin-bottom: 12px;\n\n  fill: var(--success-color);\n`;\n\nexport const ModalText = styled.p`\n  margin-bottom: 24px;\n\n  text-align: center;\n  font-size: 18px;\n`;\n\nexport const ButtonsWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n\n  @media screen and (max-width: 400px) {\n    flex-direction: column;\n    gap: 12px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport { ModalWindow } from 'components/ModalWindow/ModalWindow';\nimport {\n  ButtonsWrap,\n  ModalText,\n  SuccessIcon,\n} from './AddContactSuccessModal.styled';\nimport { PrimaryButton } from 'components/PrimaryButton/PrimaryButton.styled';\n\nexport const AddContactSuccessModal = ({ modalIsOpen, closeModal }) => {\n  const navigate = useNavigate();\n\n  return (\n    <ModalWindow closeModal={closeModal} modalIsOpen={modalIsOpen}>\n      <SuccessIcon size={80} width={0.5} />\n\n      <ModalText>The contact was added successfully!</ModalText>\n\n      <ButtonsWrap>\n        <PrimaryButton type=\"button\" onClick={() => closeModal()}>\n          Stay on this page\n        </PrimaryButton>\n        <PrimaryButton\n          type=\"button\"\n          onClick={() => {\n            navigate('/contacts');\n          }}\n        >\n          Go to Contacts\n        </PrimaryButton>\n      </ButtonsWrap>\n    </ModalWindow>\n  );\n};\n\nAddContactSuccessModal.propTypes = {\n  modalIsOpen: PropTypes.bool.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport { toast } from 'react-hot-toast';\nimport { IoMdPersonAdd } from 'react-icons/io';\nimport { useContacts } from 'hooks/useContacts';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  contactSchema,\n  defaultErrorText,\n  isIncludesContact,\n} from 'helpers/helpers';\nimport { AddContactSuccessModal } from 'components/AddContactSuccessModal/AddContactSuccessModal';\nimport {\n  Error,\n  Label,\n  NameInputIcon,\n  NumberInputIcon,\n  StyledInput,\n  WrapperInput,\n} from './Form.styled';\nimport { PrimaryButton } from 'components/PrimaryButton/PrimaryButton.styled';\n\nexport const AddContactForm = () => {\n  const contacts = useContacts();\n  const dispatch = useDispatch();\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [errorText, setErrorText] = useState('');\n\n  const onSubmit = ({ name, number }, { resetForm }) => {\n    const isExistContact = isIncludesContact(contacts, name, number);\n\n    if (isExistContact) {\n      setErrorText(isExistContact);\n\n      return;\n    }\n\n    dispatch(addContact({ name, number }))\n      .unwrap()\n      .then(resp => {\n        toast.remove();\n        toast.success(`${name} added to contacts`);\n\n        setModalIsOpen(true);\n      })\n      .catch(error => {\n        toast.remove();\n        toast.error(defaultErrorText);\n      });\n\n    resetForm();\n  };\n\n  const onInput = () => {\n    setErrorText('');\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        onSubmit={onSubmit}\n        validationSchema={contactSchema}\n      >\n        <Form>\n          <Label>\n            Name\n            <WrapperInput>\n              <StyledInput\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"First name Last name\"\n                onInput={onInput}\n              />\n              <NameInputIcon size={18} />\n            </WrapperInput>\n            <ErrorMessage name=\"name\" component={Error} />\n          </Label>\n\n          <Label>\n            Number\n            <WrapperInput>\n              <StyledInput\n                type=\"tel\"\n                name=\"number\"\n                placeholder=\"000-00-00\"\n                onInput={onInput}\n              />\n              <NumberInputIcon />\n            </WrapperInput>\n            <ErrorMessage name=\"number\" component={Error} />\n          </Label>\n\n          {errorText && (\n            <Error style={{ marginBottom: '28px', textAlign: 'center' }}>\n              {errorText}\n            </Error>\n          )}\n\n          <PrimaryButton type=\"submit\" className=\"centered-btn\">\n            <IoMdPersonAdd size={20} />\n            Add contact\n          </PrimaryButton>\n        </Form>\n      </Formik>\n\n      <AddContactSuccessModal\n        modalIsOpen={modalIsOpen}\n        closeModal={closeModal}\n      />\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Section } from 'components/Section/Section';\nimport { AddContactForm } from 'components/Forms/AddContactForm';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <main>\n      <Section title=\"Add contact\">\n        <AddContactForm />\n      </Section>\n\n      {isLoading && <Loader />}\n    </main>\n  );\n};\n\nexport default Home;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilterValue } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n        contact.number.includes(filter)\n    );\n  }\n);\n","export const selectFilterValue = state => state.filter.value;\n"],"names":["Label","styled","WrapperInput","StyledInput","Field","NameInputIcon","AiOutlineUser","EmailInputIcon","AiOutlineMail","PasswordInputIcon","RiLockPasswordLine","NumberInputIcon","BsTelephone","ButtonsWrap","Error","CloseBtn","Modal","customModalStyles","content","top","left","right","bottom","transform","display","flexDirection","justifyContent","width","maxWidth","minHeight","padding","marginRight","ModalWindow","children","closeModal","modalIsOpen","isOpen","onRequestClose","style","contentLabel","onClick","Section","title","Wrapper","Title","useContacts","useSelector","selectContacts","useVisibleContacts","selectVisibleContacts","SuccessIcon","MdOutlineDoneOutline","ModalText","AddContactSuccessModal","navigate","useNavigate","size","type","AddContactForm","contacts","dispatch","useDispatch","useState","setModalIsOpen","errorText","setErrorText","onInput","initialValues","name","number","onSubmit","resetForm","isExistContact","isIncludesContact","addContact","unwrap","then","resp","toast","catch","error","defaultErrorText","validationSchema","contactSchema","placeholder","component","marginBottom","textAlign","className","isLoading","selectIsLoading","Loader","state","items","selectError","createSelector","selectFilterValue","filter","contact","toLowerCase","includes","value"],"sourceRoot":""}