{"version":3,"file":"static/js/93.7fcf4d33.chunk.js","mappings":"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","sources":["components/Forms/Form.styled.js","components/ModalWindow/ModalWindow.styled.js","components/ModalWindow/ModalWindow.jsx","components/Section/Section.jsx","components/Section/Section.styled.js","hooks/useContacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Forms/EditContactForm.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Error/Error.styled.js","components/Error/Error.jsx","pages/Contacts.styled.js","pages/Contacts.jsx","redux/contacts/selectors.js","redux/filter/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { AiOutlineUser, AiOutlineMail } from 'react-icons/ai';\nimport { RiLockPasswordLine } from 'react-icons/ri';\nimport { BsTelephone } from 'react-icons/bs';\n\nexport const Label = styled.label`\n  display: block;\n\n  margin-bottom: 28px;\n\n  font-weight: 700;\n\n  cursor: pointer;\n`;\n\nexport const WrapperInput = styled.div`\n  position: relative;\n\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:has(input:focus) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n\n  width: 100%;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 8px 16px 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n\n  & + svg {\n    cursor: text;\n  }\n`;\n\nexport const NameInputIcon = styled(AiOutlineUser)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const EmailInputIcon = styled(AiOutlineMail)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const PasswordInputIcon = styled(RiLockPasswordLine)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const NumberInputIcon = styled(BsTelephone)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n`;\n\nexport const ButtonsWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 28px;\n`;\n\nexport const Error = styled.p`\n  padding: 4px;\n\n  font-weight: 500;\n\n  color: var(--error-color);\n`;\n","import styled from 'styled-components';\n\nexport const CloseBtn = styled.button`\n  position: absolute;\n  top: 12px;\n  right: 12px;\n  transform: scale(1);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: 1px solid transparent;\n  border-radius: 50px;\n  padding: 0;\n\n  background-color: transparent;\n\n  transition: transform var(--transition-duration)\n      var(--transition-timing-function),\n    color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    transform: scale(1.15);\n\n    color: var(--blue-color);\n  }\n`;\n","import Modal from 'react-modal';\nimport PropTypes from 'prop-types';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { CloseBtn } from './ModalWindow.styled';\n\nModal.setAppElement('#root');\n\nconst customModalStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    transform: 'translate(-50%, -50%)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: 'calc(100% - 30px)',\n    maxWidth: '600px',\n    minHeight: '160px',\n    marginRight: '-50%',\n  },\n};\n\nexport const ModalWindow = ({ children, closeModal, modalIsOpen }) => {\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      style={customModalStyles}\n      contentLabel=\"Contact Modal\"\n    >\n      {children}\n\n      <CloseBtn onClick={closeModal}>\n        <AiOutlineClose />\n      </CloseBtn>\n    </Modal>\n  );\n};\n\nModalWindow.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  closeModal: PropTypes.func.isRequired,\n  modalIsOpen: PropTypes.bool.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Title, Wrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  padding: 40px 20px;\n\n  background-color: var(--white-color);\n  box-shadow: var(--box-shadow);\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 28px;\n\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n  text-transform: uppercase;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n\n  return contacts;\n};\n\nexport const useVisibleContacts = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return visibleContacts;\n};\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const WrapperInput = styled.div`\n  position: relative;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n\n  width: 100%;\n  border: 1px solid var(--text-black-color);\n  border-radius: 8px;\n  padding: 8px 32px;\n  margin-top: 8px;\n\n  outline: 2px solid transparent;\n\n  transition: border-color var(--transition-duration)\n      var(--transition-timing-function),\n    outline-color var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    border-color: transparent;\n    outline-color: var(--blue-color);\n  }\n\n  &:focus + svg {\n    fill: var(--blue-color);\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n\n  cursor: text;\n`;\n\nexport const ResetBtn = styled.button`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n\n  width: 16px;\n  height: 16px;\n  padding: 0;\n  border: none;\n\n  color: var(--black-color);\n  background-color: transparent;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus) {\n    color: var(--blue-color);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { filterContacts } from 'redux/filter/slice';\nimport {\n  FilterInput,\n  SearchIcon,\n  WrapperInput,\n  ResetBtn,\n} from './Filter.styled';\nimport { Label } from 'components/Forms/Form.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  const onChange = evt => {\n    const value = evt.currentTarget.value.trim();\n\n    dispatch(filterContacts(value));\n  };\n\n  const onReset = evt => {\n    const label = evt.currentTarget.closest('label');\n    label.control.value = '';\n\n    dispatch(filterContacts(''));\n  };\n\n  return (\n    <>\n      <Label>\n        Find contact by name or number\n        <WrapperInput>\n          <FilterInput\n            type=\"text\"\n            value={filter}\n            placeholder=\"Name or number\"\n            onChange={onChange}\n          />\n          <SearchIcon />\n\n          {filter && (\n            <ResetBtn type=\"button\" onClick={onReset}>\n              <AiOutlineClose />\n            </ResetBtn>\n          )}\n        </WrapperInput>\n      </Label>\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { toast } from 'react-hot-toast';\nimport { BiSave } from 'react-icons/bi';\nimport { AiOutlineClose } from 'react-icons/ai';\nimport { useContacts } from 'hooks/useContacts';\nimport {\n  contactSchema,\n  defaultErrorText,\n  isIncludesContact,\n} from 'helpers/helpers';\nimport { editContact } from 'redux/contacts/operations';\nimport {\n  ButtonsWrap,\n  Error,\n  Label,\n  NameInputIcon,\n  NumberInputIcon,\n  StyledInput,\n  WrapperInput,\n} from './Form.styled';\nimport { PrimaryButton } from 'components/PrimaryButton/PrimaryButton.styled';\n\nexport const EditContactForm = ({ contact, closeModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n  const { id, name, number } = contact;\n\n  const onSubmit = values => {\n    const allContactsExceptEdited = contacts.filter(\n      contact => contact.name !== name && contact.number !== number\n    );\n\n    if (\n      isIncludesContact(allContactsExceptEdited, values.name, values.number)\n    ) {\n      return;\n    }\n\n    dispatch(\n      editContact({\n        id,\n        editedContact: values,\n      })\n    )\n      .unwrap()\n      .then(resp => {\n        toast.remove();\n        toast.success(`Contact ${name} successfully changed.`);\n      })\n      .catch(error => {\n        toast.remove();\n        toast.error(defaultErrorText);\n      });\n\n    closeModal();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name, number }}\n      onSubmit={onSubmit}\n      validationSchema={contactSchema}\n    >\n      <Form>\n        <Label>\n          Name\n          <WrapperInput>\n            <StyledInput\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"First name Last name\"\n            />\n            <NameInputIcon size={18} />\n          </WrapperInput>\n          <ErrorMessage name=\"name\" component={Error} />\n        </Label>\n\n        <Label>\n          Number\n          <WrapperInput>\n            <StyledInput type=\"tel\" name=\"number\" placeholder=\"000-00-00\" />\n            <NumberInputIcon />\n          </WrapperInput>\n          <ErrorMessage name=\"number\" component={Error} />\n        </Label>\n\n        <ButtonsWrap>\n          <PrimaryButton\n            type=\"button\"\n            className=\"cancel-primary-btn\"\n            onClick={() => closeModal()}\n          >\n            <AiOutlineClose size={20} />\n            Cancel changes\n          </PrimaryButton>\n          <PrimaryButton type=\"submit\">\n            <BiSave size={20} />\n            Save changes\n          </PrimaryButton>\n        </ButtonsWrap>\n      </Form>\n    </Formik>\n  );\n};\n\nEditContactForm.propTypes = {\n  contact: PropTypes.object.isRequired,\n  closeModal: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactInfo = styled.div`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 4px 8px;\n\n  margin-right: auto;\n\n  @media screen and (max-width: 767px) {\n    justify-content: center;\n\n    width: 100%;\n    margin-bottom: 16px;\n\n    text-align: center;\n  }\n`;\n\nexport const AvatarWrapp = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n\n  width: 60px;\n  height: 60px;\n  border: 1px solid var(--gray-color);\n  border-radius: 50%;\n\n  box-shadow: var(--box-shadow);\n\n  @media screen and (max-width: 767px) {\n    margin-bottom: 12px;\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-right: 12px;\n  }\n`;\n\nexport const ContactName = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n    margin-bottom: 4px;\n  }\n`;\n\nexport const ContactNumber = styled.a`\n  font-weight: 400;\n  text-decoration: none;\n\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    color: var(--blue-color);\n  }\n`;\n\nexport const ContactWrapp = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  @media screen and (max-width: 767px) {\n    gap: 12px;\n  }\n\n  @media screen and (max-width: 380px) {\n    flex-direction: column;\n  }\n`;\n\nexport const PhoneLink = styled.a`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 36px;\n  height: 36px;\n  border: 1px solid var(--success-color);\n  border-radius: 50%;\n  padding: 8px;\n\n  color: var(--success-color);\n  background-color: transparent;\n\n  transition: color var(--transition-duration) var(--transition-timing-function),\n    background-color var(--transition-duration)\n      var(--transition-timing-function);\n\n  &:is(:hover, :focus, :active) {\n    color: var(--white-color);\n    background-color: var(--success-color);\n  }\n`;\n\nexport const BtnsWrapp = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: row;\n    gap: 12px;\n  }\n\n  @media screen and (max-width: 380px) {\n    flex-direction: column;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { FaUserAlt } from 'react-icons/fa';\nimport { GoTrash } from 'react-icons/go';\nimport { MdOutlineEdit } from 'react-icons/md';\nimport { BsFillTelephoneFill } from 'react-icons/bs';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { defaultErrorText } from 'helpers/helpers';\nimport { EditContactForm } from 'components/Forms/EditContactForm';\nimport { ModalWindow } from 'components/ModalWindow/ModalWindow';\nimport {\n  ContactInfo,\n  ContactNumber,\n  ContactName,\n  AvatarWrapp,\n  BtnsWrapp,\n  PhoneLink,\n  ContactWrapp,\n} from './Contact.styled';\nimport { Title } from 'components/Section/Section.styled';\nimport { PrimaryButton } from 'components/PrimaryButton/PrimaryButton.styled';\n\nexport const Contact = ({ contact = {} }) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const onDelete = (id, name) => {\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(resp => {\n        toast.remove();\n        toast.success(`${name} deleted from contacts`);\n      })\n      .catch(error => {\n        toast.remove();\n        toast.error(defaultErrorText);\n      });\n  };\n\n  const toggleModal = () => {\n    modalIsOpen\n      ? (document.body.style.overflow = '')\n      : (document.body.style.overflow = 'hidden');\n\n    setModalIsOpen(!modalIsOpen);\n  };\n\n  const { id, name, number } = contact;\n  const numberHref = number.split('-').join('').split(' ').join('');\n\n  return (\n    <>\n      <AvatarWrapp>\n        <FaUserAlt size={32} color=\"gray\" />\n      </AvatarWrapp>\n\n      <ContactInfo>\n        <ContactName>{`${name}: `}</ContactName>\n        <ContactNumber href={`tel:${numberHref}`}>{number}</ContactNumber>\n      </ContactInfo>\n\n      <ContactWrapp>\n        <PhoneLink href={`tel:${numberHref}`}>\n          <BsFillTelephoneFill />\n        </PhoneLink>\n\n        <BtnsWrapp>\n          <PrimaryButton\n            type=\"button\"\n            className=\"contact-btn\"\n            onClick={toggleModal}\n          >\n            <MdOutlineEdit size={20} />\n            Edit\n          </PrimaryButton>\n\n          <PrimaryButton\n            type=\"button\"\n            className=\"contact-btn delete-primary-btn\"\n            onClick={() => onDelete(id, name)}\n          >\n            <GoTrash size={20} />\n            Delete\n          </PrimaryButton>\n        </BtnsWrapp>\n      </ContactWrapp>\n\n      <ModalWindow closeModal={toggleModal} modalIsOpen={modalIsOpen}>\n        <Title>Edit contact</Title>\n        <EditContactForm contact={contact} closeModal={toggleModal} />\n      </ModalWindow>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  transform: scale(1, 1);\n\n  display: flex;\n  align-items: center;\n\n  border: 2px solid var(--gray-color);\n  border-radius: 8px;\n  padding: 16px 20px;\n\n  box-shadow: 0px 1px 6px rgba(46, 47, 66, 0.08),\n    0px 1px 1px rgba(46, 47, 66, 0.16), 0px 2px 1px rgba(46, 47, 66, 0.08);\n\n  transition: transform var(--transition-duration)\n    var(--transition-timing-function);\n\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n\n  &:is(:hover, :focus) {\n    transform: scale(1.01, 1.05);\n  }\n\n  @media screen and (max-width: 767px) {\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n`;\n\nexport const NoContactsText = styled.p`\n  text-align: center;\n`;\n","import { Contact } from 'components/Contact/Contact';\nimport { ListItem, NoContactsText } from './ContactsList.styled';\nimport { useVisibleContacts } from 'hooks/useContacts';\n\nexport const ContactsList = () => {\n  const contacts = useVisibleContacts();\n\n  return contacts.length ? (\n    <ul>\n      {contacts.map(contact => (\n        <ListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ListItem>\n      ))}\n    </ul>\n  ) : (\n    <NoContactsText>\n      No contacts found for the entered name or number\n    </NoContactsText>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n\n  width: 100%;\n  height: calc(100vh - 134px);\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 18px;\n  line-height: 1.33;\n  letter-spacing: -0.36px;\n`;\n","import { BsEmojiFrown } from 'react-icons/bs';\nimport { Text, Wrapper } from './Error.styled';\n\nexport const Error = () => {\n  return (\n    <Wrapper>\n      <BsEmojiFrown size={64} />\n      <Text>Oops, something went wrong. Try reloading the page.</Text>\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const NoContactsText = styled.p`\n  text-align: center;\n`;\n\nexport const TotalContacts = styled.p`\n  margin-bottom: 12px;\n\n  font-weight: 700;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { useContacts, useVisibleContacts } from 'hooks/useContacts';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { selectFilterValue } from 'redux/filter/selectors';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Error } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport { NoContactsText, TotalContacts } from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useContacts();\n  const visibleContacts = useVisibleContacts();\n  const filter = useSelector(selectFilterValue);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n      .unwrap()\n      .catch(error => {\n        toast.remove();\n        toast.error('Oops, something went wrong. Try reloading the page.');\n      });\n  }, [dispatch]);\n\n  return (\n    <main>\n      {!error ? (\n        <Section title=\"Contacts\">\n          {contacts.length > 0 ? (\n            <>\n              <Filter />\n              {!filter && (\n                <TotalContacts>Total contacts: {contacts.length}</TotalContacts>\n              )}\n              {filter && visibleContacts.length > 0 && (\n                <TotalContacts>\n                  {`Total of contacts found for the query: ${visibleContacts.length}`}\n                </TotalContacts>\n              )}\n              <ContactsList />\n            </>\n          ) : (\n            <NoContactsText>No contacts</NoContactsText>\n          )}\n\n          {isLoading && <Loader />}\n        </Section>\n      ) : (\n        <Error />\n      )}\n    </main>\n  );\n};\n\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilterValue } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n        contact.number.includes(filter)\n    );\n  }\n);\n","export const selectFilterValue = state => state.filter.value;\n"],"names":["Label","styled","WrapperInput","StyledInput","Field","NameInputIcon","AiOutlineUser","EmailInputIcon","AiOutlineMail","PasswordInputIcon","RiLockPasswordLine","NumberInputIcon","BsTelephone","ButtonsWrap","Error","CloseBtn","Modal","customModalStyles","content","top","left","right","bottom","transform","display","flexDirection","justifyContent","width","maxWidth","minHeight","marginRight","ModalWindow","children","closeModal","modalIsOpen","isOpen","onRequestClose","style","contentLabel","onClick","Section","title","Wrapper","Title","useContacts","useSelector","selectContacts","useVisibleContacts","selectVisibleContacts","FilterInput","SearchIcon","BsSearch","ResetBtn","Filter","dispatch","useDispatch","filter","selectFilterValue","type","value","placeholder","onChange","evt","currentTarget","trim","filterContacts","closest","control","EditContactForm","contact","contacts","id","name","number","initialValues","onSubmit","values","allContactsExceptEdited","isIncludesContact","editContact","editedContact","unwrap","then","resp","toast","catch","error","defaultErrorText","validationSchema","contactSchema","size","component","className","ContactInfo","AvatarWrapp","ContactName","ContactNumber","ContactWrapp","PhoneLink","BtnsWrapp","Contact","useState","setModalIsOpen","toggleModal","document","body","overflow","numberHref","split","join","color","href","deleteContact","onDelete","ListItem","NoContactsText","ContactsList","length","map","Text","TotalContacts","visibleContacts","isLoading","selectIsLoading","selectError","useEffect","fetchContacts","Loader","state","items","createSelector","toLowerCase","includes"],"sourceRoot":""}